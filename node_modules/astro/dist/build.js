import fs from "fs";
import path from "path";
import {fileURLToPath} from "url";
import {performance} from "perf_hooks";
import eslexer from "es-module-lexer";
import cheerio from "cheerio";
import del from "del";
import {bold, green, yellow, red, underline} from "kleur/colors";
import mime from "mime";
import glob from "tiny-glob";
import {bundleCSS} from "./build/bundle/css.js";
import {bundleJS, collectJSImports} from "./build/bundle/js.js";
import {buildCollectionPage, buildStaticPage, getPageType} from "./build/page.js";
import {generateSitemap} from "./build/sitemap.js";
import {logURLStats, collectBundleStats, mapBundleStatsToURLStats} from "./build/stats.js";
import {getDistPath, stopTimer} from "./build/util.js";
import {debug, defaultLogDestination, defaultLogLevel, error, info, warn} from "./logger.js";
import {createRuntime} from "./runtime.js";
const defaultLogging = {
  level: defaultLogLevel,
  dest: defaultLogDestination
};
async function allPages(root) {
  const cwd = fileURLToPath(root);
  const files = await glob("**/*.{astro,md}", {cwd, filesOnly: true});
  return files.map((f) => new URL(f, root));
}
function isRemoteOrEmbedded(url) {
  return url.startsWith("http://") || url.startsWith("https://") || url.startsWith("//") || url.startsWith("data:");
}
async function build(astroConfig, logging = defaultLogging) {
  const {projectRoot, pages: pagesRoot} = astroConfig;
  const dist = new URL(astroConfig.dist + "/", projectRoot);
  const buildState = {};
  const depTree = {};
  const timer = {};
  const runtimeLogging = {
    level: "error",
    dest: defaultLogDestination
  };
  if (!astroConfig.buildOptions.site) {
    warn(logging, "config", `Set "buildOptions.site" to generate correct canonical URLs and sitemap`);
  }
  const mode = "production";
  const runtime = await createRuntime(astroConfig, {mode, logging: runtimeLogging});
  const {runtimeConfig} = runtime;
  const {snowpackRuntime} = runtimeConfig;
  try {
    await del(fileURLToPath(dist));
    timer.build = performance.now();
    const pages = await allPages(pagesRoot);
    info(logging, "build", yellow("! building pages..."));
    try {
      await Promise.all(pages.map((filepath) => {
        const buildPage = getPageType(filepath) === "collection" ? buildCollectionPage : buildStaticPage;
        return buildPage({
          astroConfig,
          buildState,
          filepath,
          logging,
          mode,
          snowpackRuntime,
          astroRuntime: runtime,
          site: astroConfig.buildOptions.site
        });
      }));
    } catch (e) {
      if (e.filename) {
        let stack = e.stack.replace(/Object\.__render \(/gm, "").replace(/\/_astro\/(.+)\.astro\.js\:\d+\:\d+\)/gm, (_, $1) => "file://" + fileURLToPath(projectRoot) + $1 + ".astro").split("\n");
        stack.splice(1, 0, `    at file://${e.filename}`);
        stack = stack.join("\n");
        error(logging, "build", `${red(`Unable to render ${underline(e.filename.replace(fileURLToPath(projectRoot), ""))}`)}

${stack}
`);
      } else {
        error(logging, "build", e.message);
      }
      error(logging, "build", red("\u2715 building pages failed!"));
      await runtime.shutdown();
      return 1;
    }
    info(logging, "build", green("\u2714"), "pages built.");
    debug(logging, "build", `built pages [${stopTimer(timer.build)}]`);
    timer.deps = performance.now();
    const scanPromises = [];
    await eslexer.init;
    for (const id of Object.keys(buildState)) {
      if (buildState[id].contentType !== "text/html")
        continue;
      const pageDeps = findDeps(buildState[id].contents, {
        astroConfig,
        srcPath: buildState[id].srcPath
      });
      depTree[id] = pageDeps;
      for (const url of [...pageDeps.js, ...pageDeps.css, ...pageDeps.images]) {
        if (!buildState[url])
          scanPromises.push(runtime.load(url).then((result) => {
            if (result.statusCode !== 200) {
              if (result.statusCode === 404) {
                throw new Error(`${buildState[id].srcPath.href}: could not find "${path.basename(url)}"`);
              }
              throw result.error || new Error(`unexpected status ${result.statusCode} when loading ${url}`);
            }
            buildState[url] = {
              srcPath: new URL(url, projectRoot),
              contents: result.contents,
              contentType: result.contentType || mime.getType(url) || ""
            };
          }));
      }
    }
    await Promise.all(scanPromises);
    debug(logging, "build", `scanned deps [${stopTimer(timer.deps)}]`);
    info(logging, "build", yellow("! optimizing css..."));
    timer.prebundle = performance.now();
    await Promise.all([
      bundleCSS({buildState, astroConfig, logging, depTree}).then(() => {
        debug(logging, "build", `bundled CSS [${stopTimer(timer.prebundle)}]`);
      })
    ]);
    info(logging, "build", green("\u2714"), "css optimized.");
    const urlStats = await collectBundleStats(buildState, depTree);
    const jsImports = await collectJSImports(buildState);
    if (astroConfig.buildOptions.sitemap && astroConfig.buildOptions.site) {
      timer.sitemap = performance.now();
      info(logging, "build", yellow("! creating sitemap..."));
      const sitemap = generateSitemap(buildState, astroConfig.buildOptions.site);
      const sitemapPath = new URL("sitemap.xml", dist);
      await fs.promises.mkdir(path.dirname(fileURLToPath(sitemapPath)), {recursive: true});
      await fs.promises.writeFile(sitemapPath, sitemap, "utf8");
      info(logging, "build", green("\u2714"), "sitemap built.");
      debug(logging, "build", `built sitemap [${stopTimer(timer.sitemap)}]`);
    }
    timer.write = performance.now();
    await Promise.all(Object.keys(buildState).map(async (id) => {
      const outPath = new URL(`.${id}`, dist);
      const parentDir = path.dirname(fileURLToPath(outPath));
      await fs.promises.mkdir(parentDir, {recursive: true});
      await fs.promises.writeFile(outPath, buildState[id].contents, buildState[id].encoding);
      delete buildState[id];
      delete depTree[id];
    }));
    debug(logging, "build", `wrote files to disk [${stopTimer(timer.write)}]`);
    if (fs.existsSync(astroConfig.public)) {
      info(logging, "build", yellow(`! copying public folder...`));
      timer.public = performance.now();
      const cwd = fileURLToPath(astroConfig.public);
      const publicFiles = await glob("**/*", {cwd, filesOnly: true});
      await Promise.all(publicFiles.map(async (filepath) => {
        const srcPath = new URL(filepath, astroConfig.public);
        const distPath = new URL(filepath, dist);
        await fs.promises.mkdir(path.dirname(fileURLToPath(distPath)), {recursive: true});
        await fs.promises.copyFile(srcPath, distPath);
      }));
      debug(logging, "build", `copied public folder [${stopTimer(timer.public)}]`);
      info(logging, "build", green("\u2714"), "public folder copied.");
    } else {
      if (path.basename(astroConfig.public.toString()) !== "public") {
        info(logging, "tip", yellow(`! no public folder ${astroConfig.public} found...`));
      }
    }
    info(logging, "build", yellow(`! bundling...`));
    if (jsImports.size > 0) {
      timer.bundleJS = performance.now();
      const jsStats = await bundleJS(jsImports, {dist: new URL(dist + "/", projectRoot), runtime});
      mapBundleStatsToURLStats({urlStats, depTree, bundleStats: jsStats});
      debug(logging, "build", `bundled JS [${stopTimer(timer.bundleJS)}]`);
      info(logging, "build", green(`\u2714`), "bundling complete.");
    }
    logURLStats(logging, urlStats);
    await runtime.shutdown();
    info(logging, "build", bold(green("\u25B6 Build Complete!")));
    return 0;
  } catch (err) {
    error(logging, "build", err.message);
    await runtime.shutdown();
    return 1;
  }
}
function findDeps(html, {astroConfig, srcPath}) {
  const pageDeps = {
    js: new Set(),
    css: new Set(),
    images: new Set()
  };
  const $ = cheerio.load(html);
  $("script").each((_i, el) => {
    const src = $(el).attr("src");
    if (src) {
      if (isRemoteOrEmbedded(src))
        return;
      pageDeps.js.add(getDistPath(src, {astroConfig, srcPath}));
    } else {
      const text = $(el).html();
      if (!text)
        return;
      const [imports] = eslexer.parse(text);
      for (const spec of imports) {
        const importSrc = spec.n;
        if (importSrc && !isRemoteOrEmbedded(importSrc)) {
          pageDeps.js.add(getDistPath(importSrc, {astroConfig, srcPath}));
        }
      }
    }
  });
  $("link[href]").each((_i, el) => {
    const href = $(el).attr("href");
    if (href && !isRemoteOrEmbedded(href) && ($(el).attr("rel") === "stylesheet" || $(el).attr("type") === "text/css" || href.endsWith(".css"))) {
      const dist = getDistPath(href, {astroConfig, srcPath});
      pageDeps.css.add(dist);
    }
  });
  $("img[src]").each((_i, el) => {
    const src = $(el).attr("src");
    if (src && !isRemoteOrEmbedded(src)) {
      pageDeps.images.add(getDistPath(src, {astroConfig, srcPath}));
    }
  });
  $("img[srcset]").each((_i, el) => {
    const srcset = $(el).attr("srcset") || "";
    const sources = srcset.split(",");
    const srces = sources.map((s) => s.trim().split(" ")[0]);
    for (const src of srces) {
      if (!isRemoteOrEmbedded(src)) {
        pageDeps.images.add(getDistPath(src, {astroConfig, srcPath}));
      }
    }
  });
  return pageDeps;
}
export {
  build,
  findDeps
};
//# sourceMappingURL=data:application/json;base64,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
